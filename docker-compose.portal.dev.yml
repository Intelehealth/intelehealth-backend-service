name: Build and Deploy to Production

on:
  push:
    branches: [ development_master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd portal
        npm install

    - name: Run tests
      run: |
        cd portal
        npm test
      continue-on-error: true

    - name: Build application
      run: |
        cd portal
        npm run build


    - name: Copy files to production server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USER }}
        key: ${{ secrets.PROD_SSH_KEY }}
        port: ${{ secrets.PROD_PORT || 22 }}
        source: "portal/,docker-compose.portal/dev.yml"
        target: "/tmp/deployment/"

    - name: Deploy to production
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DEV_HOST }}
        username: ${{ secrets.DEV_USER }}
        key: ${{ secrets.DEV_SSH_KEY }}
        port: ${{ secrets.DEV_PORT || 22 }}
        debug: true
        timeout: 60s
        command_timeout: 10m
        script: |
          # Set environment variables
          export CONTAINER_NAME="portal"
          export PORT="${{ secrets.DEV_APP_PORT || 3004 }}"
          
          # Navigate to deployment directory
          cd /tmp/deployment
          
          # Update docker-compose.portal.dev.yml with production values
          sed -i "s|nodejs-app-prod|$CONTAINER_NAME|g" docker-compose.portal.dev.yml
          sed -i "s|3000:3000|$PORT:3000|g" docker-compose.portal.dev.yml
          
          # Stop and remove existing containers
          docker-compose -f docker-compose.portal.dev.yml down 2>/dev/null || true
          
          # Build and start the service using docker-compose
          docker-compose -f docker-compose.portal.dev.yml up -d --build
          
          # Wait for container to be healthy
          sleep 10
          
          # Check if container is running
          if docker ps | grep -q $CONTAINER_NAME; then
            echo "Production deployment completed successfully!"
            echo "Application is running on port $PORT"
          else
            echo "Production deployment failed - container is not running"
            docker logs $CONTAINER_NAME
            exit 1
          fi
          
          # Clean up old images
          docker image prune -f
