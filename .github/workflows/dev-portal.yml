name: Portal Build and Deploy (Dev)

on:
  push:
    branches: [development_master] # Consider renaming to 'develop' for standard flow
    paths:
      - 'portal/**'

# ----------------------------------------------------------------------
# GLOBAL ENVIRONMENT VARIABLES
# ----------------------------------------------------------------------
env:
  PROJECT_DIR: portal
  DOCKER_IMAGE_NAME: portal
  REMOTE_HOST: ${{ secrets.DEV_HOST }}
  REMOTE_USER: ${{ secrets.DEV_USER }}
  REMOTE_PORT: 22
  ENV_FILE_PATH: /home/ubuntu/deploy/portal/.env
  PEM_FOLDER_PATH: /home/ubuntu/deploy/portal/.pem
  # Docker tag based on the commit SHA for uniqueness
  IMAGE_TAG: ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    # Set the default working directory for all steps in this job
    defaults:
      run:
        working-directory: ${{ env.PROJECT_DIR }}

    steps:
      # 1. Checkout Code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Setup Node.js & Caching
      - name: Setup Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      # 3. Install Dependencies
      - name: Install dependencies
        run: npm ci

      # 4. Build Docker Image
      - name: Build and tag Docker image
        run: |
          docker build -t ${{ env.IMAGE_TAG }} .
          docker tag ${{ env.IMAGE_TAG }} ${{ env.DOCKER_IMAGE_NAME }}:latest
          # Save to the root of the runner's workspace (../)
          docker save ${{ env.IMAGE_TAG }} > ../app-image.tar

      # 5. Transfer Docker Image using dedicated SCP Action
      - name: Transfer Docker image to remote host
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.REMOTE_HOST }}
          username: ${{ env.REMOTE_USER }}
          key: ${{ secrets.DEV_SSH_KEY }}
          port: ${{ env.REMOTE_PORT }}
          source: 'app-image.tar' 
          target: '/tmp' 
          
      # 6. Run Deployment Commands Remotely (FIXED SSH VARIABLE PASSING)
      - name: Deploy and restart container
        uses: appleboy/ssh-action@v1.0.1
        with:
          host: ${{ env.REMOTE_HOST }}
          username: ${{ env.REMOTE_USER }}
          key: ${{ secrets.DEV_SSH_KEY }}
          port: ${{ env.REMOTE_PORT }}
          script: |
            # --- Remote Shell Variables Defined by GHA Runner ---
            # GHA expands these locally, then sends them to the remote shell
            DOCKER_IMAGE_NAME="${{ env.DOCKER_IMAGE_NAME }}"
            IMAGE_TAG="${{ env.IMAGE_TAG }}"
            ENV_FILE_PATH="${{ env.ENV_FILE_PATH }}"
            PEM_FOLDER_PATH="${{ env.PEM_FOLDER_PATH }}"
            # --------------------------------------------------
            
            echo "1. Loading image $IMAGE_TAG..."
            docker load -i /tmp/app-image.tar
            rm /tmp/app-image.tar
            
            echo "2. Stopping and removing old container..."
            # Use the SHELL variables (e.g., $DOCKER_IMAGE_NAME)
            docker stop $DOCKER_IMAGE_NAME || true
            docker rm $DOCKER_IMAGE_NAME || true
            
            echo "3. Verifying required files..."
            if [ ! -f "$ENV_FILE_PATH" ]; then
              echo "Error: .env file not found at $ENV_FILE_PATH"
              exit 1
            fi
            if [ ! -d "$PEM_FOLDER_PATH" ]; then
              echo "Error: .pem folder not found at $PEM_FOLDER_PATH"
              exit 1
            fi
            
            echo "4. Running new container..."
            docker run -d \
              --name $DOCKER_IMAGE_NAME \
              --restart unless-stopped \
              -p 3004:3004 \
              --env-file $ENV_FILE_PATH \
              -v $PEM_FOLDER_PATH:/app/.pem \
              --mount type=bind,src=/etc/letsencrypt,dst=/etc/letsencrypt,ro \
              $IMAGE_TAG
            
            echo "5. Cleaning up old images..."
            docker image prune -af

      # 7. Verify Deployment
      - name: Verify successful deployment
        uses: appleboy/ssh-action@v1.0.1
        with:
          host: ${{ env.REMOTE_HOST }}
          username: ${{ env.REMOTE_USER }}
          key: ${{ secrets.DEV_SSH_KEY }}
          port: ${{ env.REMOTE_PORT }}
          script: |
            # Check if the container is running
            docker ps | grep ${{ env.DOCKER_IMAGE_NAME }}
            if [ $? -eq 0 ]; then
              echo "✅ Portal container is running successfully!"
            else
              echo "❌ Portal container failed to start!"
              exit 1
            fi
