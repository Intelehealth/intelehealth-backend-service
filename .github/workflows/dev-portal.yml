name: Portal GHCR Deploy

on:
  push:
    branches: [development_master]  
    paths:
      - 'portal/**'
  workflow_dispatch:

env:
  DOCKER_IMAGE_NAME: portal
  # IMAGE_TAG is intentionally excluded from here and calculated in the first step
  REMOTE_HOST: ${{secrets.DEV_HOST}}
  REMOTE_USER: ${{secrets.DEV_USER}}
  REMOTE_PORT: 22
  DEPLOY_ENV_FILE_PATH: /home/ubuntu/deploy/portal/.env
  DEPLOY_PEM_FOLDER_PATH: /home/ubuntu/deploy/portal/.pem
  PORTAL_DIR: portal

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    environment: dev 
    
    permissions:
      contents: read
      packages: write # Required for pushing to GHCR
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
     
    # --------------------------------------------------------------------------
    # FIX: Set Lowercase Image Tag (REQUIRED)
    # This step uses shell expansion (LOWERCASE_REPO,,) to ensure the GHCR tag is valid.
    # --------------------------------------------------------------------------
    - name: Set Lowercase Image Tag Variable
      run: |
        LOWERCASE_REPO="${{ github.repository }}"
        LOWERCASE_REPO_SLUG=${LOWERCASE_REPO,,}
        
        IMAGE_TAG="ghcr.io/$LOWERCASE_REPO_SLUG/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}"
        
        # Export the final, correct variable to the runner's environment
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        
        echo "Using image tag: $IMAGE_TAG"

    # --------------------------------------------------------------------------
    # Build and Push Stage
    # --------------------------------------------------------------------------

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ${{ env.PORTAL_DIR }}/package-lock.json

    - name: Install dependencies
      run: npm ci
      working-directory: ${{ env.PORTAL_DIR }} 

    # FIX: Set up Docker Buildx (REQUIRED for 'cache-from: type=gha')
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and Push Docker image to GHCR
      uses: docker/build-push-action@v5
      with:
        context: ${{ env.PORTAL_DIR }}
        push: true
        tags: ${{ env.IMAGE_TAG }} # References the lowercase variable
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # --------------------------------------------------------------------------
    # Deployment Stage (Pull and Run)
    # --------------------------------------------------------------------------
    
    - name: Run deployment commands on remote host
      uses: appleboy/ssh-action@v1.0.1 
      with:
        host: ${{ env.REMOTE_HOST }}
        username: ${{ env.REMOTE_USER }}
        port: ${{ env.REMOTE_PORT }}
        key: ${{ secrets.DEV_SSH_KEY }}
        tty: false
        script: |
          DOCKER_IMAGE_NAME="${{ env.DOCKER_IMAGE_NAME }}"
          IMAGE_TAG="${{ env.IMAGE_TAG }}" # References the lowercase variable
          ENV_FILE_PATH="${{ env.DEPLOY_ENV_FILE_PATH }}"
          PEM_FOLDER_PATH="${{ env.DEPLOY_PEM_FOLDER_PATH }}"
          
          echo "Starting deployment for image $IMAGE_TAG"

          # Use the dedicated deployment token (DEV_GHCR_TOKEN)
          bash -c "echo ${{ secrets.DEV_GHCR_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin"

          

          # Stop, remove, and pull
          docker stop $DOCKER_IMAGE_NAME || true
          docker rm -f $DOCKER_IMAGE_NAME || true
          docker pull $IMAGE_TAG
          docker logout ghcr.io

          # Verification checks
          if [ ! -f "$ENV_FILE_PATH" ]; then
              echo "Error: .env file not found at $ENV_FILE_PATH. Exiting."
              exit 1
          fi
          
          if [ ! -d "$PEM_FOLDER_PATH" ]; then
              echo "Error: .pem folder not found at $PEM_FOLDER_PATH. Exiting."
              exit 1
          fi
          
          # Run new container
          docker run -d \
              --name $DOCKER_IMAGE_NAME \
              --restart unless-stopped \
              -p 3004:3004 \
              --env-file $ENV_FILE_PATH \
              -v $PEM_FOLDER_PATH:/app/.pem:ro \
              --mount type=bind,src=/etc/letsencrypt,dst=/etc/letsencrypt,ro \
              $IMAGE_TAG
          
          docker image prune -f
          
          echo "Portal deployment completed successfully using GHCR pull"

    # --------------------------------------------------------------------------
    # Verification Stage
    # --------------------------------------------------------------------------
    
    - name: Verify deployment
      uses: appleboy/ssh-action@v1.0.1
      with:
        host: ${{ env.REMOTE_HOST }}
        username: ${{ env.REMOTE_USER }}
        port: ${{ env.REMOTE_PORT }}
        key: ${{ secrets.DEV_SSH_KEY }}
        script: |
          if docker ps -f name=${{ env.DOCKER_IMAGE_NAME }} | grep ${{ env.DOCKER_IMAGE_NAME }}; then
            echo "Portal container is running successfully!"
          else
            echo "Portal container is NOT running. Check remote logs."
            exit 1 
          fi
