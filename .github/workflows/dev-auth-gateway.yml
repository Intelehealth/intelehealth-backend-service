name: auth-gateway-production

# -----------------------------------------------------
# 1. SECURITY: Restrict GITHUB_TOKEN permissions
# -----------------------------------------------------
permissions:
  contents: read # Allow checkout
  packages: write # Allow pushing to GitHub Container Registry (ghcr.io) or other registry if needed

on:
  push:
    # 2. RELIABILITY: Use a dedicated 'main' or 'production' branch for production-level deployments
    branches: [development_master]
    paths:
      - 'auth-gateway/**'

env:
  DOCKER_IMAGE_NAME: auth-gateway
  # Standardize the registry to use GitHub's own for simplicity (ghcr.io)
  GH_REPO_OWNER_LOWER: ${{ github.repository_owner_lowercase }} # Standard GitHub environment variable
  REGISTRY: ghcr.io/${{ github.repository_owner }}
  
  # Remote Host variables remain, but deployment uses a dedicated action
  REMOTE_HOST: ${{secrets.DEV_HOST}}
  REMOTE_USER: ${{secrets.DEV_USER}}
  REMOTE_PORT: 22
  ENV_FILE_PATH: /home/ubuntu/deploy/auth-gateway/.env
  PEM_FOLDER_PATH: /home/ubuntu/deploy/auth-gateway/.pem

jobs:
  # -----------------------------------------------------
  # Job 1: Build, Scan, and Push the Docker Image
  # -----------------------------------------------------
  jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      # Pass the full tag (which now includes the SHA) to the deploy job
      image_tag: ${{ steps.image_meta.outputs.full_image_name }} 
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # 1. Define Lowercase Repository Owner (Used to fix the previous issue)
    - name: Define Lowercase Repository Owner
      id: owner_lower
      run: |
        REPO_OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
        echo "value=$REPO_OWNER_LOWER" >> $GITHUB_OUTPUT
        
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }} 
        password: ${{ secrets.GITHUB_TOKEN }}
        
    # 2. FIX: Ensure GITHUB_SHA is correctly concatenated in the tag string
    - name: Define Image Metadata
      id: image_meta
      run: |
        # Use a variable for the SHA for clarity
        COMMIT_SHA=${{ github.sha }}
        
        # Correctly construct the full tag string including the SHA
        TAG_SHA="ghcr.io/${{ steps.owner_lower.outputs.value }}/${{ env.DOCKER_IMAGE_NAME }}:$COMMIT_SHA"
        
        echo "full_image_name=$TAG_SHA" >> $GITHUB_OUTPUT 
        echo "Pushing image: $TAG_SHA" # Helpful for debugging
        
    - name: Set up QEMU (for multi-platform build if needed)
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # 3. Use the corrected tags in the build step
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./auth-gateway 
        push: true
        tags: |
          ${{ steps.image_meta.outputs.full_image_name }}
          ghcr.io/${{ steps.owner_lower.outputs.value }}/${{ env.DOCKER_IMAGE_NAME }}:latest
        cache-from: type=gha 
        cache-to: type=gha,mode=max

    # -----------------------------------------------------
    # QUALITY: Image Vulnerability Scanning (Critical for Production)
    # -----------------------------------------------------
    - name: Run Trivy vulnerability scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.image_meta.outputs.full_image_name }}
        format: 'table'
        exit-code: '1' # Fail the build if critical or high vulnerabilities are found
        severity: 'CRITICAL,HIGH'
        
  # -----------------------------------------------------
  # Job 2: Deploy to Remote Host
  # -----------------------------------------------------
  deploy:
    runs-on: ubuntu-latest
    needs: build # Must wait for the build job to complete
    
    steps:
    # -----------------------------------------------------
    # SECURITY: Use the dedicated SSH Action (avoid writing key to disk)
    # RELIABILITY: Use a cleaner, single-command deployment
    # -----------------------------------------------------
    - name: Deploy to remote host via SSH
      uses: appleboy/ssh-action@v1.0.1
      with:
        host: ${{ env.REMOTE_HOST }}
        username: ${{ env.REMOTE_USER }}
        port: ${{ env.REMOTE_PORT }}
        key: ${{ secrets.DEV_SSH_KEY }}
        # The script executes on the remote host
        script: |
          # Define environment variables on the remote side
          FULL_IMAGE_NAME=${{ needs.build.outputs.image_tag }}
          DOCKER_IMAGE_NAME=${{ env.DOCKER_IMAGE_NAME }}
          ENV_FILE_PATH=${{ env.ENV_FILE_PATH }}
          PEM_FOLDER_PATH=${{ env.PEM_FOLDER_PATH }}

          echo "Attempting to deploy image: $FULL_IMAGE_NAME"
          
          # Pull the image directly from the registry
          docker pull $FULL_IMAGE_NAME

          # Stop and remove existing container if running
          docker stop $DOCKER_IMAGE_NAME || true
          docker rm $DOCKER_IMAGE_NAME || true
          
          # NOTE: Production environments should ideally use a proper orchestration tool
          # (Kubernetes/Helm) instead of raw docker run.
          
          # Run new container
          docker run -d \
              --name $DOCKER_IMAGE_NAME \
              --restart unless-stopped \
              -p 3030:3030 \
              --env-file $ENV_FILE_PATH \
              -v $PEM_FOLDER_PATH:/app/.pem \
              --mount type=bind,src=/etc/letsencrypt,dst=/etc/letsencrypt,ro \
              $FULL_IMAGE_NAME
          
          # Clean up old images
          docker image prune -f
          
          echo "auth-gateway deployment completed successfully"

    # -----------------------------------------------------
    # Verification Step
    # -----------------------------------------------------
    - name: Verify deployment
      uses: appleboy/ssh-action@v1.0.1
      with:
        host: ${{ env.REMOTE_HOST }}
        username: ${{ env.REMOTE_USER }}
        port: ${{ env.REMOTE_PORT }}
        key: ${{ secrets.DEV_SSH_KEY }}
        script: |
          docker ps | grep ${{ env.DOCKER_IMAGE_NAME }}
          if [ $? -eq 0 ]; then
            echo 'auth-gateway container is running successfully!'
          else
            echo 'Error: auth-gateway container is NOT running.'
            exit 1
          fi
