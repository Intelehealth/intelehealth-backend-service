name: Deploy Configuration Microservice

on:
  push:
    branches:
      - development_master
    paths:
      - 'configuration-microservice/**'
    
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    env:
      # Docker image configuration
      IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/configuration-microservice
      CONTAINER_NAME: configuration-microservice
      
      # Environment file and PEM folder paths (adjust these paths as needed)
      ENV_FILE_PATH: /home/ubuntu/deploy/cfg-microservice/.env
      PEM_FOLDER_PATH: /home/ubuntu/deploy/cfg-microservice/.pem
      
      # Application port
      APP_PORT: 4004

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Debug Repository Info
        run: |
          echo "üîç Repository Information:"
          echo "Repository: ${{ github.repository }}"
          echo "Repository Owner: ${{ github.repository_owner }}"
          echo "Actor: ${{ github.actor }}"
          echo "Image Name: ghcr.io/${{ github.repository_owner }}/configuration-microservice"
      
      - name: Set Image Name
        id: image_name
        run: |
          REPO_OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "image_name=ghcr.io/$REPO_OWNER_LOWER/configuration-microservice" >> $GITHUB_OUTPUT
          echo "üê≥ Final image name: ghcr.io/$REPO_OWNER_LOWER/configuration-microservice"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Copy server .env file for build
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USER }}
          key: ${{ secrets.DEV_SSH_KEY }}
          script: |
            echo "üìã Copying server .env file for Docker build process..."
            if [ -f "${{ env.ENV_FILE_PATH }}" ]; then
              echo "‚úÖ Server .env file found, copying to build context..."
              # Create a temporary file with the server's .env content
              cat "${{ env.ENV_FILE_PATH }}" > /tmp/server.env
              echo "üìã Server .env file copied successfully"
              echo "üìã First 5 lines of server .env:"
              head -5 /tmp/server.env
            else
              echo "‚ùå Server .env file not found at ${{ env.ENV_FILE_PATH }}"
              echo "üìÅ Directory contents:"
              ls -la $(dirname "${{ env.ENV_FILE_PATH }}") || echo "Directory doesn't exist"
              exit 1
            fi

      - name: Download server .env file
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USER }}
          key: ${{ secrets.DEV_SSH_KEY }}
          source: "/tmp/server.env"
          target: "configuration-microservice/.env"

      - name: Verify .env file for build
        run: |
          echo "üîç Verifying .env file for Docker build..."
          if [ -f "configuration-microservice/.env" ]; then
            echo "‚úÖ .env file ready for Docker build"
            echo "üìã First 5 lines:"
            head -5 configuration-microservice/.env
            echo "üìã File size: $(wc -c < configuration-microservice/.env) bytes"
          else
            echo "‚ùå .env file not found for build"
            exit 1
          fi

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.image_name.outputs.image_name }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./configuration-microservice
          file: ./configuration-microservice/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            --env-file=${{ env.ENV_FILE_PATH }}
      - name: Deploy to Remote Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USER }}
          key: ${{ secrets.DEV_SSH_KEY }}
          port: 22
          script: |
            # Set variables
            IMAGE_NAME="${{ steps.image_name.outputs.image_name }}"
            CONTAINER_NAME="${{ env.CONTAINER_NAME }}"
            ENV_FILE_PATH="${{ env.ENV_FILE_PATH }}"
            PEM_FOLDER_PATH="${{ env.PEM_FOLDER_PATH }}"
            APP_PORT="${{ env.APP_PORT }}"
            
            # Create necessary directories if they don't exist
            sudo mkdir -p $(dirname "$ENV_FILE_PATH")
            sudo mkdir -p "$PEM_FOLDER_PATH"
            
            # Debug: Check if .env file exists and show its contents
            # Note: This is the runtime .env file on the server, different from build-time .env
            echo "üîç Checking runtime environment file..."
            echo "üìç Looking for runtime env file at: $ENV_FILE_PATH"
            echo "üìç Current working directory: $(pwd)"
            echo "üìç Current user: $(whoami)"
            
            if [ -f "$ENV_FILE_PATH" ]; then
              echo "‚úÖ Environment file found at: $ENV_FILE_PATH"
              echo "üìã File permissions:"
              ls -la "$ENV_FILE_PATH"
              echo "üìã File contents (first 10 lines):"
              head -10 "$ENV_FILE_PATH" | sed 's/^/  /'
              echo "üìã File size: $(wc -c < "$ENV_FILE_PATH") bytes"
            else
              echo "‚ùå Environment file NOT found at: $ENV_FILE_PATH"
              echo "üìÅ Directory contents:"
              ls -la $(dirname "$ENV_FILE_PATH") || echo "Directory doesn't exist"
              echo "üîç Searching for .env files in common locations:"
              find /home/ubuntu -name "*.env" -type f 2>/dev/null | head -5 || echo "No .env files found"
            fi
            
            # Pull the latest image
            echo "Pulling latest Docker image..."
            echo "üê≥ Image name: $IMAGE_NAME:latest"
            if docker pull $IMAGE_NAME:latest; then
              echo "‚úÖ Successfully pulled image"
            else
              echo "‚ùå Failed to pull image - this might be the first deployment"
              echo "üìã Available images:"
              docker images | grep configuration-microservice || echo "No configuration-microservice images found"
            fi
            
            # Stop and remove existing container if it exists
            echo "Stopping existing container..."
            docker stop $CONTAINER_NAME 2>/dev/null || true
            docker rm $CONTAINER_NAME 2>/dev/null || true
            
            # Run the new container
            # Using the existing .env file on the server for runtime environment variables
            echo "Starting new container..."
            echo "üê≥ Docker run command (using server's .env file for runtime):"
            echo "docker run -d --name $CONTAINER_NAME --restart unless-stopped --env-file $ENV_FILE_PATH -v $PEM_FOLDER_PATH:/app/src/.pem:ro -p $APP_PORT:$APP_PORT --mount type=bind,src=/etc/letsencrypt,dst=/etc/letsencrypt,ro $IMAGE_NAME:latest"
            
            if docker run -d \
              --name $CONTAINER_NAME \
              --restart unless-stopped \
              --env-file $ENV_FILE_PATH \
              -v $PEM_FOLDER_PATH:/app/src/.pem:ro \
              -p $APP_PORT:$APP_PORT \
              --mount type=bind,src=/etc/letsencrypt,dst=/etc/letsencrypt,ro \
              $IMAGE_NAME:latest; then
              echo "‚úÖ Container started successfully"
            else
              echo "‚ùå Container failed to start with env-file, trying without..."
              docker run -d \
                --name $CONTAINER_NAME \
                --restart unless-stopped \
                -v $PEM_FOLDER_PATH:/app/src/.pem:ro \
                -p $APP_PORT:$APP_PORT \
                --mount type=bind,src=/etc/letsencrypt,dst=/etc/letsencrypt,ro \
                $IMAGE_NAME:latest
            fi
            
            # Wait a moment for the container to start
            sleep 5
            
            # Check if container is running
            if docker ps | grep -q $CONTAINER_NAME; then
              echo "‚úÖ Container $CONTAINER_NAME is running successfully"
              echo "üîç Checking environment variables in container:"
              docker exec $CONTAINER_NAME env | grep -E "(NODE_ENV|PORT|DB_|API_|CONFIG_)" | head -10 || echo "No matching environment variables found"
              echo "üìã Recent container logs:"
              docker logs --tail 20 $CONTAINER_NAME
            else
              echo "‚ùå Container $CONTAINER_NAME failed to start"
              echo "üìã Container logs:"
              docker logs $CONTAINER_NAME
              echo "üìã Docker events (last 10):"
              docker events --since 5m --until now | tail -10
              exit 1
            fi
            
            # Clean up old images (keep last 3 versions)
            echo "Cleaning up old Docker images..."
            docker image prune -f
            docker images $IMAGE_NAME --format "table {{.Repository}}\t{{.Tag}}\t{{.CreatedAt}}" | tail -n +4 | head -n -1 | awk '{print $1":"$2}' | xargs -r docker rmi || true
      - name: Health Check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USER }}
          key: ${{ secrets.DEV_SSH_KEY }}
          script: |
            # Wait for service to be ready
            echo "Performing health check..."
            sleep 10
            
            # Check if the service is responding
            if curl -f http://localhost:${{ env.APP_PORT }}/health 2>/dev/null; then
              echo "‚úÖ Health check passed - service is responding"
            else
              echo "‚ö†Ô∏è Health check failed - service may not be ready yet"
              echo "Container status:"
              docker ps | grep ${{ env.CONTAINER_NAME }} || echo "Container not found"
              echo "Container logs:"
              docker logs --tail 10 ${{ env.CONTAINER_NAME }}
            fi
