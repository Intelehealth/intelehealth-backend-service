name: Deploy Configuration Microservice

on:
  push:
    branches:
      - development_master
    paths:
      - 'configuration-microservice/**'
    
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    env:
      # Docker image configuration
      IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/configuration-microservice
      CONTAINER_NAME: configuration-microservice
      
      # Environment file and PEM folder paths (adjust these paths as needed)
      ENV_FILE_PATH: /home/ubuntu/deploy/cfg-microservice/.env
      PEM_FOLDER_PATH: /home/ubuntu/deploy/cfg-microservice/.pem
      
      # Application port
      APP_PORT: 4004

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Debug Repository Info
        run: |
          echo "üîç Repository Information:"
          echo "Repository: ${{ github.repository }}"
          echo "Repository Owner: ${{ github.repository_owner }}"
          echo "Actor: ${{ github.actor }}"
          echo "Image Name: ghcr.io/${{ github.repository_owner }}/configuration-microservice"
      
      - name: Set Image Name
        id: image_name
        run: |
          REPO_OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "image_name=ghcr.io/$REPO_OWNER_LOWER/configuration-microservice" >> $GITHUB_OUTPUT
          echo "üê≥ Final image name: ghcr.io/$REPO_OWNER_LOWER/configuration-microservice"

      - name: Build Docker image locally
        run: |
          echo "üê≥ Building Docker image locally..."
          docker build -t ${{ steps.image_name.outputs.image_name }}:latest ./configuration-microservice
          echo "‚úÖ Docker image built successfully"
          docker images | grep configuration-microservice
      
      - name: Save Docker image to tarball
        run: |
          echo "üì¶ Saving Docker image to tarball..."
          docker save -o configuration-microservice.tar ${{ steps.image_name.outputs.image_name }}:latest
          echo "‚úÖ Image saved to configuration-microservice.tar"
          ls -lh configuration-microservice.tar
      - name: Transfer Docker image to remote server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USER }}
          key: ${{ secrets.DEV_SSH_KEY }}
          port: 22
          source: "configuration-microservice.tar"
          target: "/home/${{ secrets.DEV_USER }}/"

      - name: Deploy to Remote Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USER }}
          key: ${{ secrets.DEV_SSH_KEY }}
          port: 22
          script: |
            # Set variables
            IMAGE_NAME="${{ steps.image_name.outputs.image_name }}"
            CONTAINER_NAME="${{ env.CONTAINER_NAME }}"
            ENV_FILE_PATH="${{ env.ENV_FILE_PATH }}"
            PEM_FOLDER_PATH="${{ env.PEM_FOLDER_PATH }}"
            APP_PORT="${{ env.APP_PORT }}"
            
            # Create necessary directories if they don't exist
            sudo mkdir -p $(dirname "$ENV_FILE_PATH")
            sudo mkdir -p "$PEM_FOLDER_PATH"
            
            # Debug: Check if .env file exists and show its contents
            echo "üîç Checking environment file..."
            echo "üìç Looking for env file at: $ENV_FILE_PATH"
            echo "üìç Current working directory: $(pwd)"
            echo "üìç Current user: $(whoami)"
            
            if [ -f "$ENV_FILE_PATH" ]; then
              echo "‚úÖ Environment file found at: $ENV_FILE_PATH"
              echo "üìã File permissions:"
              ls -la "$ENV_FILE_PATH"
              echo "üìã File contents (first 10 lines):"
              head -10 "$ENV_FILE_PATH" | sed 's/^/  /'
              echo "üìã File size: $(wc -c < "$ENV_FILE_PATH") bytes"
            else
              echo "‚ùå Environment file NOT found at: $ENV_FILE_PATH"
              echo "üìÅ Directory contents:"
              ls -la $(dirname "$ENV_FILE_PATH") || echo "Directory doesn't exist"
              echo "üîç Searching for .env files in common locations:"
              find /home/ubuntu -name "*.env" -type f 2>/dev/null | head -5 || echo "No .env files found"
            fi
            
            # Load the Docker image from tarball
            echo "üì¶ Loading Docker image from tarball..."
            if docker load -i /home/${{ secrets.DEV_USER }}/configuration-microservice.tar; then
              echo "‚úÖ Successfully loaded image from tarball"
              echo "üìã Available images:"
              docker images | grep configuration-microservice
            else
              echo "‚ùå Failed to load image from tarball"
              exit 1
            fi
            
            # Clean up the tarball
            echo "üßπ Cleaning up tarball..."
            rm -f /home/${{ secrets.DEV_USER }}/configuration-microservice.tar
            
            # Stop and remove existing container if it exists
            echo "Stopping existing container..."
            docker stop $CONTAINER_NAME 2>/dev/null || true
            docker rm $CONTAINER_NAME 2>/dev/null || true
            
            # Check SSL certificate availability and fix permissions
            echo "üîç Checking SSL certificate availability..."
            if [ -d "/etc/letsencrypt/live" ]; then
              echo "‚úÖ Let's Encrypt directory found"
              ls -la /etc/letsencrypt/live/ | head -3
              
              # Fix SSL certificate permissions
              echo "üîß Fixing SSL certificate permissions..."
              # Container runs as nodejs user (UID 1001:GID 1001)
              # We need to change ownership to match the container user
              sudo chmod -R 755 /etc/letsencrypt/live
              sudo chown -R 1001:1001 /etc/letsencrypt/live
              echo "‚úÖ SSL certificate permissions fixed (changed to UID 1001:GID 1001)"
              
              # Check if we can find any SSL certificates
              SSL_CERTS=$(sudo find /etc/letsencrypt/live -name "privkey.pem" 2>/dev/null | wc -l)
              if [ "$SSL_CERTS" -gt 0 ]; then
                echo "‚úÖ Found $SSL_CERTS SSL certificate(s)"
                SSL_MOUNT="--mount type=bind,src=/etc/letsencrypt,dst=/etc/letsencrypt,ro"
              else
                echo "‚ö†Ô∏è No SSL certificates found, will run in HTTP mode"
                SSL_MOUNT=""
              fi
            else
              echo "‚ö†Ô∏è /etc/letsencrypt/live/ not found, will run in HTTP mode"
              SSL_MOUNT=""
            fi
            
            # Run the new container
            echo "Starting new container..."
            echo "üê≥ Docker run command:"
            echo "docker run -d --name $CONTAINER_NAME --restart unless-stopped --env-file $ENV_FILE_PATH -v $PEM_FOLDER_PATH:/app/src/.pem:ro -p $APP_PORT:$APP_PORT $SSL_MOUNT $IMAGE_NAME:latest"
            
            if docker run -d \
              --name $CONTAINER_NAME \
              --restart unless-stopped \
              --env-file $ENV_FILE_PATH \
              -v $PEM_FOLDER_PATH:/app/src/.pem:ro \
              -p $APP_PORT:$APP_PORT \
              $SSL_MOUNT \
              $IMAGE_NAME:latest; then
              echo "‚úÖ Container started successfully"
            else
              echo "‚ùå Container failed to start, trying without SSL mount..."
              docker run -d \
                --name $CONTAINER_NAME \
                --restart unless-stopped \
                --env-file $ENV_FILE_PATH \
                -v $PEM_FOLDER_PATH:/app/src/.pem:ro \
                -p $APP_PORT:$APP_PORT \
                $IMAGE_NAME:latest
            fi
            
            # Wait a moment for the container to start
            sleep 5
            
            # Check if container is running
            if docker ps | grep -q $CONTAINER_NAME; then
              echo "‚úÖ Container $CONTAINER_NAME is running successfully"
              echo "üîç Checking environment variables in container:"
              docker exec $CONTAINER_NAME env | grep -E "(NODE_ENV|PORT|DB_|API_|CONFIG_)" | head -10 || echo "No matching environment variables found"
              echo "üìã Recent container logs:"
              docker logs --tail 20 $CONTAINER_NAME
            else
              echo "‚ùå Container $CONTAINER_NAME failed to start"
              echo "üìã Container logs:"
              docker logs $CONTAINER_NAME
              echo "üìã Docker events (last 10):"
              docker events --since 5m --until now | tail -10
              exit 1
            fi
            
            # Clean up old images (keep last 3 versions)
            echo "Cleaning up old Docker images..."
            docker image prune -f
            docker images $IMAGE_NAME --format "table {{.Repository}}\t{{.Tag}}\t{{.CreatedAt}}" | tail -n +4 | head -n -1 | awk '{print $1":"$2}' | xargs -r docker rmi || true
      - name: Health Check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USER }}
          key: ${{ secrets.DEV_SSH_KEY }}
          script: |
            # Wait for service to be ready
            echo "Performing health check..."
            sleep 10
            
            # Check if the service is responding
            if curl -f http://localhost:${{ env.APP_PORT }}/health 2>/dev/null; then
              echo "‚úÖ Health check passed - service is responding"
            else
              echo "‚ö†Ô∏è Health check failed - service may not be ready yet"
              echo "Container status:"
              docker ps | grep ${{ env.CONTAINER_NAME }} || echo "Container not found"
              echo "Container logs:"
              docker logs --tail 10 ${{ env.CONTAINER_NAME }}
            fi
