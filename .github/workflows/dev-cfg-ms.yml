name: Deploy Configuration Microservice

on:
  push:
    branches:
      - development_master
    paths:
      - 'configuration-microservice/**'
    
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    env:
      # Docker image configuration
      IMAGE_NAME: intelehealth/configuration-microservice
      CONTAINER_NAME: configuration-microservice
      
      # Environment file and PEM folder paths (adjust these paths as needed)
      ENV_FILE_PATH: home/ubuntu/deploy/cfg-microservice/.env
      PEM_FOLDER_PATH: home/ubuntu/deploy/cfg-microservice/.pem
      
      # Application port
      APP_PORT: 4004

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./configuration-microservice
          file: ./configuration-microservice/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ENV_FILE_PATH=${{ env.ENV_FILE_PATH }}
            PEM_FOLDER_PATH=${{ env.PEM_FOLDER_PATH }}

      - name: Deploy to Remote Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USER }}
          key: ${{ secrets.DEV_SSH_KEY }}
          port: 22
          script: |
            # Set variables
            IMAGE_NAME="${{ env.IMAGE_NAME }}"
            CONTAINER_NAME="${{ env.CONTAINER_NAME }}"
            ENV_FILE_PATH="${{ env.ENV_FILE_PATH }}"
            PEM_FOLDER_PATH="${{ env.PEM_FOLDER_PATH }}"
            APP_PORT="${{ env.APP_PORT }}"
            
            # Create necessary directories if they don't exist
            sudo mkdir -p $(dirname "$ENV_FILE_PATH")
            sudo mkdir -p "$PEM_FOLDER_PATH"
            
            # Pull the latest image
            echo "Pulling latest Docker image..."
            docker pull $IMAGE_NAME:latest
            
            # Stop and remove existing container if it exists
            echo "Stopping existing container..."
            docker stop $CONTAINER_NAME 2>/dev/null || true
            docker rm $CONTAINER_NAME 2>/dev/null || true
            
            # Run the new container
            echo "Starting new container..."
            docker run -d \
              --name $CONTAINER_NAME \
              --restart unless-stopped \
              --env-file $ENV_FILE_PATH \
              -v $PEM_FOLDER_PATH:/app/src/.pem:ro \
              -p $APP_PORT:$APP_PORT \
              --mount type=bind,src=/etc/letsencrypt,dst=/etc/letsencrypt,ro \
              $IMAGE_NAME:latest
            
            # Wait a moment for the container to start
            sleep 5
            
            # Check if container is running
            if docker ps | grep -q $CONTAINER_NAME; then
              echo "✅ Container $CONTAINER_NAME is running successfully"
              docker logs --tail 20 $CONTAINER_NAME
            else
              echo "❌ Container $CONTAINER_NAME failed to start"
              docker logs $CONTAINER_NAME
              exit 1
            fi
            
            # Clean up old images (keep last 3 versions)
            echo "Cleaning up old Docker images..."
            docker image prune -f
            docker images $IMAGE_NAME --format "table {{.Repository}}\t{{.Tag}}\t{{.CreatedAt}}" | tail -n +4 | head -n -1 | awk '{print $1":"$2}' | xargs -r docker rmi || true

      - name: Health Check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USER }}
          key: ${{ secrets.DEV_SSH_KEY }}
          script: |
            # Wait for service to be ready
            echo "Performing health check..."
            sleep 10
            
            # Check if the service is responding
            if curl -f http://localhost:${{ env.APP_PORT }}/health 2>/dev/null; then
              echo "✅ Health check passed - service is responding"
            else
              echo "⚠️ Health check failed - service may not be ready yet"
              echo "Container status:"
              docker ps | grep ${{ env.CONTAINER_NAME }} || echo "Container not found"
              echo "Container logs:"
              docker logs --tail 10 ${{ env.CONTAINER_NAME }}
            fi
